{

	"$schema": "http://schema.management.azure.com/schemas/2014-04-01-preview/deploymentTemplate.json",
	"contentVersion": "1.0.0.0",

	"parameters": {
		"location": {
			"type": "string",
			"defaultValue": "West US",
			"allowedValues": [
				"West US",
				"West Europe",
				"East US",
				"East Asia",
				"Southeast Asia"
			],
			"metadata": {
				"description": "Region where you want to create all the resources"
			}
		},
		"storageAccountName": {
			"type": "string",			
			"metadata": {
				"description": "Storage account name pattern.The template will use this value and the resource group name for all the storage accounts."
			}
		},
		"storageAccountType": {
			"type": "string",
			"defaultValue": "Standard_LRS",
			"allowedValues": [
				"Standard_LRS",
				"Premium_LRS"
			],
			"metadata": {
				"description": "Type of storage account. Standard_LRS or Premium_LRS. For Premium Storage, use a DS VM"
			}
		},
		"vmStorageAccountContainerName": {
			"type": "string",
			"defaultValue": "cbavhds",
			"metadata": {
				"description": "Container name in which you want to place the vhds"
			}
		},
		"vmNumberOfDataDisks": {
			"type": "int",
			"defaultValue": 2,
			"metadata": {
				"description": "Number of data disks (For future versions, currently 2 disks will be created)"
			}
		},
		"vmSizeDataDisks": {
			"type": "int",
			"defaultValue": 120,
			"metadata": {
				"description": "Data disks Size in GBs"
			}
		},
		"linuxFileSystem": {
			"type": "string",
			"allowedValues": [
				"ext4",
				"xfs"
			],
			"defaultValue": "ext4",
			"metadata": {
				"description": "Linux File systems"
			}
		},
		"createRAID": {
			"type": "string",
			"allowedValues": [
				"true",
				"false"
			],
			"defaultValue": "true",
			"metadata": {
				"description": "Specify true if you want to RAID the data disks (For future versions)"
			}
		},
		"availabilitySetName": {
			"type": "string",
			"defaultValue": "CbAvSet",
			"metadata": {
				"description": "AvailabilitySet name"
			}
		},
		"vmNamePAttern": {
			"type": "string",
			"defaultValue": "VMCba",
			"metadata": {
				"description": "VM Name Pattern; which it wil be concatenated with an incremental number"
			}
		},
		"vmSize": {
			"type": "string",
			"defaultValue": "Standard_D2",
			"allowedValues": [
				"Standard_D1",
				"Standard_DS1",
				"Standard_D2",
				"Standard_DS2",
				"Standard_D3",
				"Standard_DS3",
				"Standard_D4",
				"Standard_DS4",
				"Standard_D11",
				"Standard_DS11",
				"Standard_D12",
				"Standard_DS12",
				"Standard_D13",
				"Standard_DS13",
				"Standard_D14",
				"Standard_DS14",
			],
			"metadata": {
				"description": "VM Size, for Premium Storage specify DS VMs."
			}
		},
		"serversRole": {
			"type": "string",
			"metadata": {
				"description": "Servers role, for instance webtier, database.A tag will be created with the provided value"
			}
		},
		"serversPurpose": {
			"type": "string",
			"defaultValue": "DEV",
			"metadata": {
				"description": "Servers purpose, for instance development, test, pre-production, production.A tag will be created with the provided value"
			}
		},
		"imagePublisher": {
            "type": "string",
            "defaultValue": "Canonical",
            "allowedValues": [
            	"Canonical",
            	"OpenLogic"
            ],
            "metadata": {
                 "description": "VM Image Publisher"
        	}
        },
        "imageOffer": {
            "type": "string",
            "defaultValue": "UbuntuServer",
            "allowedValues": [
            	"UbuntuServer",
            	"CentOS"
            ],
            "metadata": {
                "description": "VM Image Offer"
            }
        },
        "imageSKU": {
            "type": "string",
            "defaultValue": "12.04.5-LTS",
             "allowedValues": [
            	"12.04.5-LTS",
            	"6.5"
            ],
            "metadata": {
                "description": "VM Image SKU"
            }
        },
		"numberOfVms": {
			"type": "int",
			"defaultValue": 3,
			"metadata": {
				"description": "Number of VMs.The template will create N number of identical VMs"
			}
		},
		"adminUserName": {
			"type": "string",
			"metadata": {
				"description": "Admin user name"
			}
		},
		"adminPassword": {
			"type": "securestring",
			"metadata": {
				"description": "Admin password"
			}
		},
		"sshKeyData": {
			"type": "string",
			"metadata": {
				"description": "ssh public key for the admin user"
			}
		},
		"faultDomainCount": {
			"type": "int",
			"defaultValue": 3,
			"metadata": {
				"description": "Number of fault domains (Maximun supported value is 3)"
			}
		},
		"updateDomainCount": {
			"type": "int",
			"defaultValue": 10,
			"metadata": {
				"description": "Number of update domains (Maximun supported value is 20)"
			}
		},
		"customScriptConfigStorageAccountName":{
			"type": "string",
			"metadata": {
				"description": "Private storage account name in which you are storing your certificates for ansible and the template bash scripts"
				}
		},
		"customScriptConfigStorageAccountKey":{
			"type": "string",
			"metadata": {
				"description": "Private storage account key"
				}
		},
		"sshRootCerBlobLocation":{
			"type": "string",
			"defaultValue":"customscript/id_rsa",
			"metadata": {
				"description": "Specify the location of your certificate for ansible and SSH configuration"
			}

		},
		"sshRootPubBlobLocation":{
			"type": "string",
			"defaultValue":"customscript/id_rsa.pub",
			"metadata": {
				"description": "Specify the location of your public key for ansible and SSH configuration"
			}
		},
		"ansiblePlaybookLocation":{
			"type": "string",
			"defaultValue":"customscript/InitStorage_RAID.yml",
			"metadata": {
				"description": "Specify the location of the ansible playbook for configuring Storage"
			}
		},


		"virtualNetworkName": {
			"type": "string",
			"defaultValue": "vnetCBA",
			"metadata": {
				"description": "Virtual network name"
			}
		},
		"addressPrefix": {
			"type": "string",
			"defaultValue": "10.0.0.0/16",
			"metadata": {
				"description": "IP address space "
			}
		},
		"subnet1Name": {
			"type": "string",
			"defaultValue": "FrontEnd",
			"metadata": {
				"description": "Frontend subnet name "
			}
		},
		"subnet2Name": {
			"type": "string",
			"defaultValue": "Backend",
			"metadata": {
				"description": "Backend subnet name"
			}
		},
		"subnet1Prefix": {
			"type": "string",
			"defaultValue": "10.0.1.0/24",
			"metadata": {
				"description": "Frontend address space"
			}
		},
		"subnet2Prefix": {
			"type": "string",
			"defaultValue": "10.0.2.0/24",
			"metadata": {
				"description": "Backend address space"
			}
		},
		"publicIPName": {
			"type": "string",
			"defaultValue": "VIPCBA",
			"metadata": {
				"description": "Public IP name"
			}
		},
		"publicIPType": {
			"type": "string",
			"defaultValue": "Dynamic",
			"allowedValues": [
				"Dynamic",
				"Static"
			],
			"metadata": {
				"description": "Public IP Type (For future versions, currently only Dynamic is supported)"
			}
		},
		"VMIPAddressStart": {
			"type": "string",
			"defaultValue": "10.0.2.2",
			"metadata": {
				"description": "IPs that will be allocated to VMs.For instance, if you use 10.0.2.2, the first VM will use 10.0.2.20 and the second one 10.02.21 (Azure Reserves the first 4 IPs in a range)"
			}
		},
		"vmNICNamePattern": {
			"type": "string",
			"defaultValue": "NicVmCba",
			"metadata": {
				"description": "NIC name pattern"
			}
		},
		"dnsNameLabel": {
			"type": "string",
			"metadata": {
				"description": "Public facing DNS name"
			}
		},
		"loadBalancerName": {
			"type": "string",
			"defaultValue": "CouchbaseLB",
			"metadata": {
				"description": "Load balance name"
			}
		},
		"sshNatRuleFrontEndPort": {
			"type": "string",
			"defaultValue": "6400",
			"metadata": {
				"description": "SSH Nat frontend port range"
			}
		},
		"sshNatRuleBackEndPort": {
			"type": "int",
			"defaultValue": 22,
			"metadata": {
				"description": "SSH Private port"
			}
		}
	},


	"variables": {

		"apiVersion":"2015-05-01-preview",

		"sshKeyPath": "[concat('/home/',parameters('adminUsername'),'/.ssh/authorized_keys')]",

		"customScriptAnsibleFile" :"configure_ansible.sh",
		"customScriptAnsibleUrl": "[concat('https://',parameters('customScriptConfigStorageAccountName'),'.blob.core.windows.net/customscript/',variables('customScriptAnsibleFile'))]",
		"customScriptAnsibleCommand": "[concat('bash ',variables('customScriptAnsibleFile'))]",
		"customScriptAnsibleParameters": "[concat(' -i ',parameters('VMIPAddressStart'),' -n ',parameters('numberOfVms'),' -r ',parameters('createRAID'),' -f ',parameters('linuxFileSystem'))]",
		"sshRootCerBlobUrl" :"[concat('https://',parameters('customScriptConfigStorageAccountName'),'.blob.core.windows.net/',parameters('sshRootCerBlobLocation'))]",

		"customScriptSSHRootFile" :"configure_ssh_root.sh",
		"customScriptSSHRootUrl": "[concat('https://',parameters('customScriptConfigStorageAccountName'),'.blob.core.windows.net/customscript/',variables('customScriptSSHRootFile'))]",
		"customScriptSSHRootCommand": "[concat('bash ',variables('customScriptSSHRootFile'))]",
		"sshRootPubBlobUrl" :"[concat('https://',parameters('customScriptConfigStorageAccountName'),'.blob.core.windows.net/',parameters('sshRootPubBlobLocation'))]",
		"ansiblePlaybookUrl" :"[concat('https://',parameters('customScriptConfigStorageAccountName'),'.blob.core.windows.net/',parameters('ansiblePlaybookLocation'))]",
		"ansibleVmTypes":{
			"Premium_LRS":{
					"vmSize":"Standard_DS1"
				},
			"Standard_LRS":{
					"vmSize":"Standard_A1"
				},
		},
		"currentEnvironmentSettings" :"[variables('ansibleVmTypes')[parameters('storageAccountType')]]",
		"ansibleVmType":"[variables('currentEnvironmentSettings').vmSize]",


		"newVirtualNetworkName": "[concat(parameters('virtualNetworkName'))]",
		"publicIPName": "[concat(parameters('publicIPName'))]",
		"publicIPRef": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPName'))]",
		"NICipconfig": "ipCnfgBE",
		"NICRef": "[resourceId('Microsoft.Network/networkInterfaces',parameters('vmNICNamePattern'))]",
		"DNSNameLB": "[concat(parameters('dnsNameLabel'))]",
		"vnetRef": "[resourceId('Microsoft.Network/virtualNetworks',variables('newVirtualNetworkName'))]",
		"subnetBackEndRef": "[concat(variables('vnetRef'),'/subnets/',parameters('subnet2Name'))]",
		"FrontEndRef": "[concat(variables('vnetRef'),'/subnets/',parameters('subnet1Name'))]",

		"loadBalancerRef": "[resourceId('Microsoft.Network/loadBalancers',parameters('loadBalancerName'))]",
		"lbRuleName": "lbRuleCbAdmin",
		"lbRuleRef": "[concat(variables('loadBalancerRef'),'/loadBalancingRules/',variables('lbRuleName'))]",
		"lbFEConfig": "PLBcbaFrontConfg",
		"lbFEConfigRef": "[concat(variables('loadBalancerRef'),'/frontendIPConfigurations/',variables('lbFEConfig'))]",
		"lbBEConfig": "[concat('LBBEcbaFrontConfg')]",
		"lbBEConfigRef": "[concat(variables('loadBalancerRef'),'/backendAddressPools/' ,variables('lbBEConfig'))]",
		"lbcbaProbe": "cbaLBProbe",
		"lbcbaProbeRef": "[concat(variables('loadBalancerRef'),'/probes/',variables('lbcbaProbe'))]",
		"lbProbePort": 8092,
		"lbExposedPort": 80,		
		"lbcbaIdleTimeOut": 4,

		"storageAccountName": "[concat(resourceGroup().name,parameters('storageAccountName'),'0')]",
		"storageRef": "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]"
	},


	"resources": [
		{
			"apiVersion": "[variables('apiVersion')]",
			"type": "Microsoft.Network/virtualNetworks",
			"name": "[variables('newVirtualNetworkName')]",
			"location": "[parameters('location')]",
			"properties": {
				"addressSpace": {
					"addressPrefixes": [
						"[parameters('addressPrefix')]"
					]
				},
				"subnets": [
					{
						"name": "[parameters('subnet1Name')]",
						"properties": {
							"addressPrefix": "[parameters('subnet1Prefix')]"
						}
					},
					{
						"name": "[parameters('subnet2Name')]",
						"properties": {
							"addressPrefix": "[parameters('subnet2Prefix')]"
						}
					}
				]
			}
		},

		{
			"apiVersion": "[variables('apiVersion')]",
			"type": "Microsoft.Network/publicIPAddresses",
			"name": "[variables('publicIPName')]",
			"location": "[parameters('location')]",
			"dependsOn": [
				"[variables('vnetRef')]"

			],
			"properties": {
				"publicIPAllocationMethod": "[parameters('publicIPType')]",
				"dnsSettings": {
					"domainNameLabel": "[variables('DNSNameLB')]"
				}
			}
		},

		{
			"apiVersion": "[variables('apiVersion')]",
			"type": "Microsoft.Network/loadBalancers",
			"name": "[parameters('loadBalancerName')]",
			"location": "[parameters('location')]",
			"dependsOn": [
				"[variables('publicIPRef')]"
			],
			"properties": {
				
				"frontendIPConfigurations": [
					{
					"name": "[variables('lbFEConfig')]",
					"properties": {
							"publicIPAddress": {
								"id": "[variables('publicIPRef')]"
							}
						}

					}
				],
				"backendAddressPools": [
					{"name": "[variables('lbBEConfig')]"}
				],
				"probes": [
					{
						"name": "[variables('lbcbaProbe')]",
						"properties": {
							"protocol": "tcp",
							"port": "[variables('lbProbePort')]",
							"intervalInSeconds": "5",
							"numberOfProbes": "3"
						}
					}
				],
				"loadBalancingRules": [
					{
						"name": "[variables('lbRuleName')]",
						"properties": {
							"frontendIPConfiguration":{"id": "[variables('lbFEConfigRef')]"},							
							"backendAddressPool": {"id": "[variables('lbBEConfigRef')]"},
							"protocol": "tcp",
							"frontendPort": "[variables('lbExposedPort')]",
							"backendPort": "[variables('lbExposedPort')]",
							"enableFloatingIP": false,
							"idleTimeoutInMinutes": "[ variables('lbcbaIdleTimeOut')]",
							"probe": {
								"id": "[variables('lbcbaProbeRef')]"
							}
						}
					}
				],
				"inboundNatRules": [
					{
						"name": "sshToAnsibleControllerNATRule",
						"properties": {
							"frontendIPConfiguration": {"id":"[variables('lbFEConfigRef')]"},		
							"protocol": "tcp",
							"frontendPort": "[concat(parameters('sshNatRuleFrontEndPort'),'0')]",
							"backendPort": "[parameters('sshNatRuleBackEndPort')]",
							"enableFloatingIP": false
						}
					}
				]
			}
		},


		{
			"type": "Microsoft.Compute/availabilitySets",
			"name": "[parameters('availabilitySetName')]",
			"apiVersion": "[variables('apiVersion')]",
			"location": "[parameters('location')]",
			"properties": {
					"PlatformFaultDomainCount":"[parameters('faultDomainCount')]",
                    "PlatformUpdateDomainCount":"[parameters('updateDomainCount')]"

			}
		},

		{
			"type": "Microsoft.Storage/storageAccounts",
			"name": "[variables('storageAccountName')]",
			"apiVersion": "2015-05-01-preview",
			"location": "[parameters('location')]",			
			"properties": {
				"accountType": "[parameters('storageAccountType')]"
			}
		},

		{
			"apiVersion": "[variables('apiVersion')]",
			"type": "Microsoft.Network/networkInterfaces",
			"name": "[concat(parameters('vmNICNamePattern'),copyIndex())]",
			"location": "[parameters('location')]",
			"copy": {
				"name": "NICSLoop",
				"count": "[parameters('numberOfVMS')]"
			},
			"dependsOn": [
				"[variables('vnetRef')]",
				"[variables('loadBalancerRef')]"
			],
			"properties": {
				"ipConfigurations": [
					{
						"name": "[variables('NICipconfig')]",
						"properties": {
							"privateIPAllocationMethod": "Static ",
							"privateIPAddress": "[concat(parameters('VMIPAddressStart'),copyindex())]",
							"subnet": {
								"id": "[variables('subnetBackEndRef')]"
							},
							"loadBalancerBackendAddressPools": 
							[    
			                    {"id": "[variables('lbBEConfigRef')]"}
                			]
						}

					}
				]
			}
		},

		{
			"apiVersion": "[variables('apiVersion')]",
			"type": "Microsoft.Compute/virtualMachines",
			"name": "[concat(parameters('vmNamePAttern'),copyIndex())]",
			"location": "[parameters('location')]",
			"tags": {
				"ServerRole": "[parameters('serversRole')]",
				"ServerEnvironment" :"[parameters('serversPurpose')]"
				},
			"copy": {
				"name": "VMsLoop",
				"count": "[parameters('numberOfVms')]"
			},
			"dependsOn": [
				"[variables('storageRef')]",
				"[concat(variables('NICRef'),copyIndex())]",
				"[concat('Microsoft.Compute/availabilitySets/', parameters('availabilitySetName'))]",
			],
			"properties": {
				"availabilitySet": {
					"id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))]"
				},
				"hardwareProfile": {
					"vmSize": "[parameters('vmSize')]"
				},
				"osProfile": {
					"computername": "[concat(parameters('vmNamePAttern'),copyIndex())]",
					"adminUsername": "[parameters('adminUserName')]",
					"adminPassword": "[parameters('adminPassword')]",
					"linuxConfiguration": {
						"disablePasswordAuthentication": "false",
						"ssh": {
							"publicKeys": [
								{
									"path": "[variables('sshKeyPath')]",
									"keyData": "[parameters('sshKeyData')]"
								}
							]
						}
					}
				},
				"storageProfile": {
	                "imageReference": {
	                    "publisher": "[parameters('imagePublisher')]",
	                    "offer": "[parameters('imageOffer')]",
	                    "sku" : "[parameters('imageSKU')]",
	                    "version":"latest"
	                },
	                "osDisk" : {
	                    "name": "[concat(parameters('vmNamePAttern'),copyIndex(), '-OS')]",
	                    "vhd": {
	                       "uri": "[concat('http://',variables('storageAccountName'),'.blob.core.windows.net/',parameters('vmStorageAccountContainerName'),'/',parameters('vmNamePAttern'),copyIndex(),'-OS.vhd')]"
	                    },
	                    "caching": "ReadWrite",
	                    "createOption": "FromImage"
	                },
	                "dataDisks": [
						{
							"name": "[concat(parameters('vmNamePAttern'),copyIndex(), '-Data_1')]",
							"diskSizeGB": "[parameters('vmSizeDataDisks')]",
							"lun": 0,
							"vhd": {
								"uri": "[concat('http://',variables('storageAccountName'),'.blob.core.windows.net/',parameters('vmStorageAccountContainerName'),'/',parameters('vmNamePAttern'),copyIndex(),'-Data_1.vhd')]"
							},
							"caching": "ReadOnly",
							"createOption": "Empty"
						},
						{
							"name": "[concat(parameters('vmNamePAttern'),copyIndex(), '-Data_2')]",
							"diskSizeGB": "[parameters('vmSizeDataDisks')]",
							"lun": 1,
							"vhd": {
								"uri": "[concat('http://',variables('storageAccountName'),'.blob.core.windows.net/',parameters('vmStorageAccountContainerName'),'/',parameters('vmNamePAttern'),copyIndex(),'-Data_2.vhd')]"
							},
							"caching": "ReadOnly",
							"createOption": "Empty"
						}
					]
            	},
				"networkProfile": {
					"networkInterfaces": [
						{
							"id": "[concat(variables('NICRef'),copyIndex())]"
						}
					]
				}
			}
		},


		{
			"type": "Microsoft.Compute/virtualMachines/extensions",
			"name": "[concat(parameters('vmNamePAttern'),copyIndex(),'/configuressh')]",
			"apiVersion": "[variables('apiVersion')]",
			"location": "[parameters('location')]",
			"copy": {
				"name": "VMExtensionsLoop",
				"count": "[parameters('numberOfVms')]"
			},
			"dependsOn": [
				"VMsLoop"
			],
			"properties": {
				"publisher": "Microsoft.OSTCExtensions",
				"type": "CustomScriptForLinux",
				"typeHandlerVersion": "1.2",
				"settings": {
					"fileUris": [
						"[variables('customScriptSSHRootUrl')]",
						"[variables('sshRootPubBlobUrl')]"
					],
					"commandToExecute": "[variables('customScriptSSHRootCommand')]",

				},
				"protectedSettings":{
					"storageAccountName":"[parameters('customScriptConfigStorageAccountName')]",
					"storageAccountKey":"[parameters('customScriptConfigStorageAccountKey')]"
				}
			}
		},
		
		{
			"apiVersion": "[variables('apiVersion')]",
			"type": "Microsoft.Network/networkInterfaces",
			"name": "NICAnsibleController",
			"location": "[parameters('location')]",
			"dependsOn": [
				"[variables('vnetRef')]",
				"[variables('loadBalancerRef')]"
			],
			"properties": {
				"ipConfigurations": [
					{
						"name": "[variables('NICipconfig')]",
						"properties": {
							"privateIPAllocationMethod": "Static",
							"privateIPAddress": "[concat(parameters('VMIPAddressStart'),parameters('numberOfVms'))]",
							"subnet": {	"id": "[variables('subnetBackEndRef')]"},
                			"loadBalancerInboundNatRules":
                			[
                    			{"id": "[concat(variables('loadBalancerRef'),'/inboundNatRules/sshToAnsibleControllerNATRule')]"}                    			
                			]
						}

					}
				]
			}
		},


		{
			"apiVersion": "[variables('apiVersion')]",
			"type": "Microsoft.Compute/virtualMachines",
			"name": "AnsibleController",
			"location": "[parameters('location')]",
			"tags": {
				"ServerRole": "AnsibleController",
				"ServerEnvironment" :"[parameters('serversPurpose')]"
				},
			"dependsOn": [
				"[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
				"[resourceId('Microsoft.Network/networkInterfaces','NICAnsibleController')]",
				"[concat('Microsoft.Compute/availabilitySets/', parameters('availabilitySetName'))]",
				"VMsLoop"
			],
			"properties": {
				"availabilitySet": {
					"id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))]"
				},
				"hardwareProfile": {
					"vmSize": "[variables('ansibleVMType')]"
				},
				"osProfile": {
					"computername": "AnsibleController",
					"adminUsername": "[parameters('adminUserName')]",
					"adminPassword": "[parameters('adminPassword')]",
					"linuxConfiguration": {
						"disablePasswordAuthentication": "false",
						"ssh": {
							"publicKeys": [
								{
									"path": "[variables('sshKeyPath')]",
									"keyData": "[parameters('sshKeyData')]"
								}
							]
						}
					}
				},
				"storageProfile": {
					"imageReference": {
	                    "publisher": "[parameters('imagePublisher')]",
	                    "offer": "[parameters('imageOffer')]",
	                    "sku" : "[parameters('imageSKU')]",
	                    "version":"latest"
	                },
	                "osDisk" : {
	                    "name": "AnsibleController-OS",
	                    "vhd": {
	                       "uri": "[concat('http://',variables('storageAccountName'),'.blob.core.windows.net/',parameters('vmStorageAccountContainerName'),'/AnsibleController-OS.vhd')]"
	                    },
	                    "caching": "ReadWrite",
	                    "createOption": "FromImage"
	                },					
					"dataDisks": [
					]
				},
				"networkProfile": {
					"networkInterfaces": [
						{
							"id": "[resourceId('Microsoft.Network/networkInterfaces','NICAnsibleController')]"
						}
					]
				}
			}
		},


		{
			"type": "Microsoft.Compute/virtualMachines/extensions",
			"name": "AnsibleController/installansible",
			"apiVersion": "[variables('apiVersion')]",
			"location": "[parameters('location')]",
			"dependsOn": [
				"Microsoft.Compute/virtualMachines/AnsibleController"
			],
			"properties": {
				"publisher": "Microsoft.OSTCExtensions",
				"type": "CustomScriptForLinux",
				"typeHandlerVersion": "1.2",
				"settings": {
					"fileUris": [
						"[variables('customScriptAnsibleUrl')]",
						"[variables('ansiblePlaybookUrl')]",
						"[variables('sshRootPubBlobUrl')]",
						"[variables('sshRootCerBlobUrl')]",
					],
					"commandToExecute": "[concat(variables('customScriptAnsibleCommand'),variables('customScriptAnsibleParameters'))]",

				},
				"protectedSettings":{
					"storageAccountName":"[parameters('customScriptConfigStorageAccountName')]",
					"storageAccountKey":"[parameters('customScriptConfigStorageAccountKey')]"
				}
			}
		}
	],

	"outputs":
	{
		"sshResourceURL":{
				"value":"[concat('SSH Url to Ansible :',parameters('adminUserName'),'@', reference(variables('publicIPRef'),providers('Microsoft.Network', 'publicIPAddresses').apiVersions[0]).dnsSettings.fqdn,' -p ',parameters('sshNatRuleFrontEndPort'))]",
				"type":"string"
		}
	}
}
